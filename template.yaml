AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  whattheversion

  try to get the latest version of the specified git repo, docker image or helm chart

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Parameters:
  HostedZoneId:
    Type: String
    Default: Z3CBRYU3UXXFKT
  DomainName:
    Type: String
    Default: whattheversion.hutter.cloud
  # the acm certificate for the domain must be created in us-east-1
  # as cloudformation can't create resources in multiple regions (only with stacksets)
  # the cert can not be created in the same sam template.
  # the resource is managed in terraform instead
  AcmCertificateArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:337261303015:certificate/66380bfb-6ebd-4671-bc1c-3da39eddb73b"

Resources:
  ##
  # cloudfront distribution
  # thanks to: https://gist.github.com/daaru00/3260e1f26750525047f574443b473f46
  ##

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${Bucket}/*"
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        DefaultRootObject: 'index.html'
        HttpVersion: http2
        Origins:
          - DomainName: !Sub "${Bucket}.s3.${AWS::Region}.amazonaws.com"
            Id: bucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          - DomainName: !Join [ '', !Split [ 'https://', !GetAtt HttpApi.ApiEndpoint ] ]
            Id: apiOrigin
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: "https-only"
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: bucketOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - Compress: 'true'
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            TargetOriginId: apiOrigin
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            PathPattern: '/api/*'
            ViewerProtocolPolicy: redirect-to-https
        PriceClass: 'PriceClass_100'
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront

  ##
  # api gateway
  ##
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: api # stage name is required to allow routing from cloudfront /api/*
     # would be really cool to use openapi spec to automatically
     # configure all routes
     # the problem is that the lambda invoke permission isnt created
     # and i havent found a way how to retrieve the route arn dynamically
     # from sam/cf to reference it as source arn in "AWS::Lambda::Permission"
     # DefinitionBody:
     #   'Fn::Transform':
     #     Name: 'AWS::Include'
     #     Parameters:
     #       Location: ./openapi-spec.yaml

  GitLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: git
        Description: Contains git binary and libs
        ContentUri: ./layers/git
        RetentionPolicy: Retain

  FunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: whattheversionlayer
        Description: Dependencies for whattheversion
        ContentUri: ./layers/whattheversion
        CompatibleRuntimes:
          - python3.9
        RetentionPolicy: Retain

  GitVersion:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/git-api
      Handler: main.handler
      Runtime: python3.9
      Architectures: ['x86_64']
      Timeout: 300
      Layers:
        - !Ref FunctionLayer
        - !Ref GitLayer
      Environment:
        # thanks to: https://github.com/binxio/aws-lambda-git
        Variables:
          LD_LIBRARY_PATH: "/opt/git/lib:$LD_LIBRARY_PATH"
          PATH: "/opt/git/bin:$PATH"
      Events:
        WhatTheVersionEvent:
          Type: HttpApi 
          Properties:
            Path: /git
            Method: post
            ApiId: !Ref HttpApi

  HelmVersion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/helm-api
      Handler: main.handler
      Runtime: python3.9
      Architectures: ['x86_64']
      Timeout: 300
      Layers:
        - !Ref FunctionLayer
      Events:
        WhatTheVersionEvent:
          Type: HttpApi
          Properties:
            Path: /helm
            Method: post
            ApiId: !Ref HttpApi

  DockerVersion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/docker-api
      Handler: main.handler
      Runtime: python3.9
      Architectures: ['x86_64']
      Timeout: 300
      Layers:
        - !Ref FunctionLayer
      Events:
        WhatTheVersionEvent:
          Type: HttpApi
          Properties:
            Path: /docker
            Method: post
            ApiId: !Ref HttpApi
